- require 'cgi'
- # Check to see if we have notes, if not then try to get them
- if @notes.nil? && @concept && @ontology
  - @note_link = "/ontologies/#{@ontology.acronym}/notes/"

.notes_list_container
  .add_comment{style: "float: left; margin-right: 1em;"}
    - if session[:user].nil?
      = link_to "Add comment", login_index_path(redirect: request.url), class: "link_button", style: "font-size: .9em", data: { parent_id: "#{@ontology.id}", parent_type: "ontology" }
    - else
      = link_to "Add comment", "javascript:void(0);", class: "add_comment link_button", style: "font-size: .9em", data: { parent_id: "#{@ontology.id}", parent_type: "ontology" }
  .add_proposal{style: "float: left; margin-right: 1em;"}
    - if session[:user].nil?
      = link_to "Add proposal", login_index_path(redirect: request.url), class: "link_button", style: "font-size: .9em", data: { parent_id: "#{@ontology.id}", parent_type: "ontology" }
    - else
      = link_to "Add proposal", "javascript:void(0);", class: "add_proposal link_button", style: "font-size: .9em", data: { parent_id: "#{@ontology.id}", parent_type: "ontology" }
  .subscribe_to_notes{:style => "float: left;"}
    = subscribe_button(@ontology.acronym)
  .notes_delete{:style => "float: left; margin-left: 1em;"}
    / TODO_REV: Enable notes deletion
    / delete_button
  %div.ont_notes_filter{style: "clear: both; padding-top: 10px; float: right;"}
    Filter:
    %input#hide_archived_ont{:checked => "true", :name => "hide_archived_ont", :type => "checkbox"}
    %label{:for => "hide_archived_ont"} Hide Archived
  %div.create_note_form{style: "display: none; clear: both;"}

  .ont_notes_table_container{:style => "clear: both;"}
    %table.zebra.notes_ont_list_table{:id => "ontology_notes_list", :style => "width: 100%; clear: both;", :width => "100%"}
      %thead
        %tr
          %th.notes_delete
            Delete
          %th
            Subject
          %th
            Subject Sort
          %th
            Archive Sort
          %th
            Author
          %th
            Type
          %th
            Class
          %th
            Created
      %tbody
        - if @notes.nil? || @notes.empty?
          %tr#ont_no_notes
            %td No notes to display
            %td
            %td
            %td
            %td
            %td
            %td
            %td
        - else
          - @notes.each do |note|
            %tr{:class => "#{note.id}_tr", :id => "#{note.id}_tr"}
              %td.notes_delete
                - if note.deletable?(session[:user])
                  / TODO_REV: Handle notes deletion
                  / %input.delete_note_checkbox{"data-applies_to" => note.appliesTo['id'], "data-note_id" => note.id, :id => "delete_#{note.id}", :type => "checkbox"}/
              %td
                = link_to note.subject, "#{@note_link}#{CGI.escape(note.id)}", :id => "row_#{note.id}", :class => "ont_notes_list_link notes_list_link"
                &nbsp;&nbsp;&nbsp;
                %span{:id => "#{note.id}_row_archived", :style => "font-size: x-small; color: grey;"}
                  - if note.archived
                    archived
              %td
                = note.subject
              %td
                = note.archived || "false"
              %td
                = note.creator.split('/')[-1]
              %td
                = note.proposal ? get_note_type_text(note.proposal.type) : "Comment"
              %td
                - if note.relatedClass && note.relatedClass.length > 0
                  %a{href: "/ontologies/#{@ontology.acronym}?p=classes&conceptid=#{CGI.escape(note.relatedClass.first)}"}= note.relatedClass.first
              %td
                = DateTime.parse(note.created).strftime("%Y-%m-%d")
:javascript
  jQuery(".ontologies.show").ready(function(){
    setupNotesFacebox()
    setupNotesFaceboxSizing();
    bindAddCommentClick();
    bindAddProposalClick();
    bindProposalChange();
    bindReplyClick();
    bindReplyCancelClick();
    bindReplySaveClick();

    jQuery("a.subscribe_to_notes").live("click", function(){
      subscribeToNotes(this);
    });

    jQuery("#hide_archived_ont").click(function(){
      hideOrUnhideArchivedOntNotes();
    });

    wireOntTable(jQuery("#ontology_notes_list"));
  });